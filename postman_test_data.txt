
// Role-based users, works, comments, ratings, site reviews

{
  "info": {"name": "ArabFilm Full Flow", "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"},
  "item": [
    {
      "name": "Auth - Signin Admin",
      "request": {
        "method": "POST",
        "header": [{"key": "Content-Type", "value": "application/json"}],
        "url": {"raw": "{{baseUrl}}/api/users/signin", "host": ["{{baseUrl}}"], "path": ["api","users","signin"]},
        "body": {"mode": "raw", "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"Admin@123\"\n}"}
      },
      "event": [{"listen": "test", "script": {"exec": ["pm.globals.set('adminToken', pm.response.json().token);"]}}]
    },
    {
      "name": "Admin - Create Publisher",
      "request": {
        "method": "POST",
        "header": [
          {"key": "Content-Type", "value": "application/json"},
          {"key": "Authorization", "value": "Bearer {{adminToken}}"}
        ],
        "url": {"raw": "{{baseUrl}}/api/users", "host": ["{{baseUrl}}"], "path": ["api","users"]},
        "body": {"mode": "raw", "raw": "{\n  \"username\": \"publisher1\",\n  \"email\": \"publisher1@example.com\",\n  \"password\": \"Pub@12345\",\n  \"role\": \"publisher\"\n}"}
      },
      "event": [{"listen": "test", "script": {"exec": ["pm.globals.set('publisherId', pm.response.json().id);"]}}]
    },
    {
      "name": "Auth - Signin Publisher",
      "request": {
        "method": "POST",
        "header": [{"key": "Content-Type", "value": "application/json"}],
        "url": {"raw": "{{baseUrl}}/api/users/signin", "host": ["{{baseUrl}}"], "path": ["api","users","signin"]},
        "body": {"mode": "raw", "raw": "{\n  \"email\": \"publisher1@example.com\",\n  \"password\": \"Pub@12345\"\n}"}
      },
      "event": [{"listen": "test", "script": {"exec": ["pm.globals.set('publisherToken', pm.response.json().token);"]}}]
    },
    {
      "name": "Publisher - Create Work",
      "request": {
        "method": "POST",
        "header": [
          {"key": "Content-Type", "value": "application/json"},
          {"key": "Authorization", "value": "Bearer {{publisherToken}}"}
        ],
        "url": {"raw": "{{baseUrl}}/api/works", "host": ["{{baseUrl}}"], "path": ["api","works"]},
        "body": {"mode": "raw", "raw": "{\n  \"type\": \"film\",\n  \"nameArabic\": \"فيلم الناشر\",\n  \"nameEnglish\": \"Publisher Movie\",\n  \"year\": 2024,\n  \"director\": \"Dir\",\n  \"assistantDirector\": \"AD\",\n  \"genre\": \"Drama\",\n  \"cast\": [\"A\",\"B\"],\n  \"country\": \"EG\",\n  \"filmingLocation\": \"Cairo\",\n  \"summary\": \"Test\",\n  \"posterUrl\": \"https://picsum.photos/200/300\"\n}"}
      },
      "event": [{"listen": "test", "script": {"exec": ["pm.globals.set('workId', pm.response.json()._id);"]}}]
    },
    {
      "name": "Auth - Signin User",
      "request": {
        "method": "POST",
        "header": [{"key": "Content-Type", "value": "application/json"}],
        "url": {"raw": "{{baseUrl}}/api/users/signin", "host": ["{{baseUrl}}"], "path": ["api","users","signin"]},
        "body": {"mode": "raw", "raw": "{\n  \"email\": \"user1@example.com\",\n  \"password\": \"User@12345\"\n}"}
      },
      "event": [{"listen": "test", "script": {"exec": ["pm.globals.set('userToken', pm.response.json().token);"]}}]
    },
    {
      "name": "User - Add Comment",
      "request": {
        "method": "POST",
        "header": [
          {"key": "Content-Type", "value": "application/json"},
          {"key": "Authorization", "value": "Bearer {{userToken}}"}
        ],
        "url": {"raw": "{{baseUrl}}/api/comments", "host": ["{{baseUrl}}"], "path": ["api","comments"]},
        "body": {"mode": "raw", "raw": "{\n  \"workId\": \"{{workId}}\",\n  \"commentText\": \"Great work!\"\n}"}
      }
    },
    {
      "name": "User - Rate Work",
      "request": {
        "method": "POST",
        "header": [
          {"key": "Content-Type", "value": "application/json"},
          {"key": "Authorization", "value": "Bearer {{userToken}}"}
        ],
        "url": {"raw": "{{baseUrl}}/api/ratings", "host": ["{{baseUrl}}"], "path": ["api","ratings"]},
        "body": {"mode": "raw", "raw": "{\n  \"workId\": \"{{workId}}\",\n  \"ratingValue\": 5\n}"}
      }
    },
    {
      "name": "User - Site Review",
      "request": {
        "method": "POST",
        "header": [
          {"key": "Content-Type", "value": "application/json"},
          {"key": "Authorization", "value": "Bearer {{userToken}}"}
        ],
        "url": {"raw": "{{baseUrl}}/api/site-reviews", "host": ["{{baseUrl}}"], "path": ["api","site-reviews"]},
        "body": {"mode": "raw", "raw": "{\n  \"ratingValue\": 4,\n  \"description\": \"Great site!\"\n}"}
      }
    },
    {
      "name": "Admin - View All Comments",
      "request": {
        "method": "GET",
        "header": [{"key": "Authorization", "value": "Bearer {{adminToken}}"}],
        "url": {"raw": "{{baseUrl}}/api/comments/admin", "host": ["{{baseUrl}}"], "path": ["api","comments","admin"]}
      }
    },
    {
      "name": "Admin - View All Ratings",
      "request": {
        "method": "GET",
        "header": [{"key": "Authorization", "value": "Bearer {{adminToken}}"}],
        "url": {"raw": "{{baseUrl}}/api/ratings/admin", "host": ["{{baseUrl}}"], "path": ["api","ratings","admin"]}
      }
    },
    {
      "name": "Publisher - View Comments for Own Works",
      "request": {
        "method": "GET",
        "header": [{"key": "Authorization", "value": "Bearer {{publisherToken}}"}],
        "url": {"raw": "{{baseUrl}}/api/comments/publisher", "host": ["{{baseUrl}}"], "path": ["api","comments","publisher"]}
      }
    },
    {
      "name": "Publisher - View Ratings for Own Works",
      "request": {
        "method": "GET",
        "header": [{"key": "Authorization", "value": "Bearer {{publisherToken}}"}],
        "url": {"raw": "{{baseUrl}}/api/ratings/publisher", "host": ["{{baseUrl}}"], "path": ["api","ratings","publisher"]}
      }
    }
  ]
}
==========================================
ARAB FILM BACKEND - POSTMAN TEST DATA
==========================================

BASE URL: https://arabfilmsserver.onrender.com

==========================================
0. UPLOAD IMAGE (POST /api/upload/image)
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/upload/image
Headers: None (Postman will set Content-Type automatically for form-data)

Body: form-data
Key: image (Type: File)
Value: Select an image file from your computer (JPG, PNG, GIF, WEBP)

Expected Response: 200 OK
Response will contain:
{
  "message": "Image uploaded successfully",
  "data": {
    "public_id": "arabfilm/posters/image-1234567890",
    "secure_url": "https://res.cloudinary.com/your-cloud/image/upload/v123/arabfilm/posters/image-1234567890.jpg"
  }
}

Use the "secure_url" as posterUrl in your work creation requests.

==========================================
1. CREATE FILM (POST /api/works)
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/works
Headers: Content-Type: application/json

Body (JSON):
{
  "type": "film",
  "nameArabic": "فيلم تجريبي",
  "nameEnglish": "Test Film",
  "year": 2024,
  "director": "Director Name",
  "assistantDirector": "Assistant Name",
  "genre": "Drama",
  "cast": ["Actor One", "Actor Two"],
  "country": "Egypt",
  "filmingLocation": "Cairo",
  "summary": "Film summary",
  "posterUrl": "https://picsum.photos/600"
}

Expected Response: 201 Created
Response will contain: _id, timestamps, and all submitted data

==========================================
1.5. CREATE FILM WITH IMAGE UPLOAD (POST /api/works/with-image)
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/works/with-image
Headers: None (Postman will set Content-Type automatically for form-data)

Body: form-data
Keys and Values:
- type: film
- nameArabic: فيلم تجريبي مع صورة
- nameEnglish: Test Film with Image
- year: 2024
- director: Director Name
- assistantDirector: Assistant Name
- genre: Drama
- cast: ["Actor One", "Actor Two"]
- country: Egypt
- filmingLocation: Cairo
- summary: Film summary with uploaded image
- image: [Select File] (Choose an image from your computer)

Expected Response: 201 Created
Response will contain: _id, timestamps, and all submitted data with Cloudinary URL for posterUrl

==========================================
2. CREATE SERIES (POST /api/works)
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/works
Headers: Content-Type: application/json

Body (JSON):
{
  "type": "series",
  "nameArabic": "مسلسل تجريبي",
  "nameEnglish": "Test Series",
  "year": 2023,
  "director": "Series Director",
  "assistantDirector": "Assistant Name",
  "genre": "Action",
  "cast": ["Actor A", "Actor B"],
  "country": "Lebanon",
  "filmingLocation": "Beirut",
  "summary": "Series summary",
  "posterUrl": "https://picsum.photos/601",
  "seasonsCount": 2,
  "episodesCount": 16
}

Expected Response: 201 Created
Response will contain: _id, timestamps, seasonsCount, episodesCount, and all submitted data

==========================================
2.5. CREATE SERIES WITH IMAGE UPLOAD (POST /api/works/with-image)
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/works/with-image
Headers: None (Postman will set Content-Type automatically for form-data)

Body: form-data
Keys and Values:
- type: series
- nameArabic: مسلسل تجريبي مع صورة
- nameEnglish: Test Series with Image
- year: 2023
- director: Series Director
- assistantDirector: Assistant Name
- genre: Action
- cast: ["Actor A", "Actor B"]
- country: Lebanon
- filmingLocation: Beirut
- summary: Series summary with uploaded image
- seasonsCount: 2
- episodesCount: 16
- image: [Select File] (Choose an image from your computer)

Expected Response: 201 Created
Response will contain: _id, timestamps, seasonsCount, episodesCount, and all submitted data with Cloudinary URL for posterUrl

==========================================
3. GET ALL WORKS (GET /api/works)
==========================================
URL: GET https://arabfilmsserver.onrender.com/api/works
Headers: None

Expected Response: 200 OK
Response will be an array of all works in the database

==========================================
4. GET WORK BY ID (GET /api/works/:id)
==========================================
URL: GET https://arabfilmsserver.onrender.com/api/works/{WORK_ID}
Headers: None

Replace {WORK_ID} with the _id from previous create requests

Expected Response: 200 OK
Response will contain the specific work data

==========================================
5. UPDATE WORK (PATCH /api/works/:id)
==========================================
URL: PATCH https://arabfilmsserver.onrender.com/api/works/{WORK_ID}
Headers: Content-Type: application/json

Body (JSON):
{
  "nameEnglish": "Updated Title"
}

Expected Response: 200 OK
Response will contain the updated work data

==========================================
6. DELETE WORK (DELETE /api/works/:id)
==========================================
URL: DELETE https://arabfilmsserver.onrender.com/api/works/{WORK_ID}
Headers: None

Expected Response: 204 No Content

==========================================
7. INVALID SERIES (Missing Required Fields)
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/works
Headers: Content-Type: application/json

Body (JSON):
{
  "type": "series",
  "nameArabic": "مسلسل ناقص",
  "nameEnglish": "Missing Series",
  "year": 2022,
  "director": "Dir",
  "assistantDirector": "AD",
  "genre": "Comedy",
  "cast": ["A"],
  "country": "KSA",
  "filmingLocation": "Riyadh",
  "summary": "...",
  "posterUrl": "https://picsum.photos/602"
}

Expected Response: 400 Bad Request
Response will contain validation errors for missing seasonsCount and episodesCount

==========================================
8. INVALID WORK TYPE
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/works
Headers: Content-Type: application/json

Body (JSON):
{
  "type": "invalid_type",
  "nameArabic": "نوع خاطئ",
  "nameEnglish": "Wrong Type",
  "year": 2024,
  "director": "Dir",
  "assistantDirector": "AD",
  "genre": "Drama",
  "cast": ["Actor"],
  "country": "Egypt",
  "filmingLocation": "Cairo",
  "summary": "Test",
  "posterUrl": "https://picsum.photos/603"
}

Expected Response: 400 Bad Request
Response will contain validation error for invalid type

==========================================
9. INVALID ID FORMAT
==========================================
URL: GET https://arabfilmsserver.onrender.com/api/works/invalid_id
Headers: None

Expected Response: 400 Bad Request
Response will contain validation error for invalid MongoDB ID format

==========================================
10. NON-EXISTENT WORK
==========================================
URL: GET https://arabfilmsserver.onrender.com/api/works/507f1f77bcf86cd799439011
Headers: None

Expected Response: 404 Not Found
Response will contain: {"message": "Work not found"}

==========================================
11. UPLOAD INVALID FILE TYPE
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/upload/image
Headers: None

Body: form-data
Key: image (Type: File)
Value: Select a non-image file (like .txt, .pdf, etc.)

Expected Response: 400 Bad Request
Response will contain: {"message": "Only image files are allowed!"}

==========================================
12. UPLOAD LARGE FILE (>5MB)
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/upload/image
Headers: None

Body: form-data
Key: image (Type: File)
Value: Select an image file larger than 5MB

Expected Response: 400 Bad Request
Response will contain: {"message": "File too large. Maximum size is 5MB."}

==========================================
13. CREATE WORK WITH INVALID IMAGE
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/works/with-image
Headers: None

Body: form-data
Keys and Values:
- type: film
- nameArabic: فيلم مع صورة خاطئة
- nameEnglish: Film with Invalid Image
- year: 2024
- director: Director
- assistantDirector: AD
- genre: Drama
- cast: ["Actor"]
- country: Egypt
- filmingLocation: Cairo
- summary: Test
- image: [Select File] (Choose a non-image file like .txt)

Expected Response: 400 Bad Request
Response will contain: {"message": "Only image files are allowed!"}

==========================================
TESTING SEQUENCE WITH UPLOAD
==========================================
1. Start with "UPLOAD IMAGE" - save the returned secure_url
2. Use that secure_url as posterUrl in "CREATE FILM"
3. Try "CREATE FILM WITH IMAGE UPLOAD" - upload image directly with form data
4. Try "CREATE SERIES WITH IMAGE UPLOAD" - upload image with series data
5. Use the returned _id in "GET WORK BY ID"
6. Use that _id in "UPDATE WORK"
7. Use that _id in "DELETE WORK"
8. Try "GET ALL WORKS" to see remaining works
9. Test validation errors with "INVALID" requests

==========================================
ENVIRONMENT VARIABLES (Optional)
==========================================
In Postman, you can set these environment variables:
- baseUrl: https://arabfilmsserver.onrender.com
- workId: (will be set automatically from create responses)
- uploadedImageUrl: (will be set from upload responses)

Then use {{baseUrl}}/api/works, {{workId}}, and {{uploadedImageUrl}} in your requests.

==========================================
NOTES
==========================================
- All timestamps are automatically added (createdAt, updatedAt)
- The _id field is automatically generated by MongoDB
- Validation errors will show specific field names and messages
- The API supports both "film" and "series" types
- Series require seasonsCount and episodesCount fields
- All string fields are trimmed automatically
- Cast must be a non-empty array of strings
- Year must be between 1800 and 3000
- Image upload supports: JPG, PNG, GIF, WEBP (max 5MB)
- Uploaded images are stored in Cloudinary folder: arabfilm/posters
- You can use either uploaded image URLs or direct image URLs for posterUrl
- NEW: /api/works/with-image endpoint allows creating work + uploading image in one request
- posterUrl is now optional when using /with-image endpoint (image file will be used instead)

==========================================
FAVORITES ENDPOINTS TEST DATA
==========================================

==========================================
14. ADD TO FAVORITES
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/users/favorites
Headers: 
- Authorization: Bearer {{authToken}}
- Content-Type: application/json

Body (raw JSON):
{
  "workId": "{{workId}}"
}

Expected Response: 200 OK
Response will contain: 
{
  "message": "Added to favorites successfully",
  "favorites": ["{{workId}}"]
}

==========================================
15. REMOVE FROM FAVORITES
==========================================
URL: DELETE https://arabfilmsserver.onrender.com/api/users/favorites/{{workId}}
Headers: 
- Authorization: Bearer {{authToken}}

Expected Response: 200 OK
Response will contain: 
{
  "message": "Removed from favorites successfully",
  "favorites": []
}

==========================================
16. GET FAVORITES LIST
==========================================
URL: GET https://arabfilmsserver.onrender.com/api/users/favorites
Headers: 
- Authorization: Bearer {{authToken}}

Expected Response: 200 OK
Response will contain: 
{
  "favorites": [
    {
      "_id": "{{workId}}",
      "type": "film",
      "nameArabic": "اسم العمل",
      "nameEnglish": "Work Name",
      "year": 2024,
      "director": "المخرج",
      "genre": "النوع",
      "posterUrl": "https://example.com/poster.jpg"
    }
  ],
  "count": 1
}

==========================================
17. CHECK FAVORITE STATUS
==========================================
URL: GET https://arabfilmsserver.onrender.com/api/users/favorites/check/{{workId}}
Headers: 
- Authorization: Bearer {{authToken}}

Expected Response: 200 OK
Response will contain: 
{
  "isFavorite": true,
  "workId": "{{workId}}"
}

==========================================
18. ADD NON-EXISTENT WORK TO FAVORITES
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/users/favorites
Headers: 
- Authorization: Bearer {{authToken}}
- Content-Type: application/json

Body (raw JSON):
{
  "workId": "507f1f77bcf86cd799439011"
}

Expected Response: 404 Not Found
Response will contain: {"message": "Work not found"}

==========================================
19. ADD ALREADY FAVORITED WORK
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/users/favorites
Headers: 
- Authorization: Bearer {{authToken}}
- Content-Type: application/json

Body (raw JSON):
{
  "workId": "{{workId}}"
}

Expected Response: 400 Bad Request
Response will contain: {"message": "Work is already in favorites"}

==========================================
20. REMOVE NON-FAVORITED WORK
==========================================
URL: DELETE https://arabfilmsserver.onrender.com/api/users/favorites/{{workId}}
Headers: 
- Authorization: Bearer {{authToken}}

Expected Response: 400 Bad Request
Response will contain: {"message": "Work is not in favorites"}

==========================================
FAVORITES TESTING SEQUENCE
==========================================
1. First, create a work using "CREATE FILM" or "CREATE SERIES"
2. Save the returned _id as {{workId}} environment variable
3. Check initial favorite status with "CHECK FAVORITE STATUS" (should be false)
4. Add work to favorites with "ADD TO FAVORITES"
5. Check favorite status again (should be true)
6. Get favorites list with "GET FAVORITES LIST"
7. Try adding the same work again (should fail)
8. Remove work from favorites with "REMOVE FROM FAVORITES"
9. Check final favorite status (should be false)
10. Try removing the same work again (should fail)
11. Test with non-existent work ID

==========================================
FAVORITES ENVIRONMENT VARIABLES
==========================================
In Postman, set these environment variables:
- authToken: (from user signin response)
- workId: (from create work response)
- userId: (from user signin response)

==========================================
FAVORITES NOTES
==========================================
- All favorites endpoints require authentication (Bearer token)
- Each user has their own favorites list
- Favorites are stored as an array of work IDs in the user document
- The getFavorites endpoint populates work details automatically
- You can check if a work is favorited without loading the full favorites list
- Adding/removing favorites is idempotent (safe to call multiple times)
- Favorites persist until explicitly removed by the user

==========================================
COMMENT ENDPOINTS TEST DATA
==========================================

==========================================
21. ADD COMMENT
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/comments
Headers: 
- Authorization: Bearer {{authToken}}
- Content-Type: application/json

Body (raw JSON):
{
  "workId": "{{workId}}",
  "commentText": "فيلم رائع جداً! أحببت القصة والتمثيل"
}

Expected Response: 201 Created
Response will contain: 
{
  "_id": "64f8a1b2c3d4e5f6a7b8c9d1",
  "userId": "{{userId}}",
  "workId": "{{workId}}",
  "commentText": "فيلم رائع جداً! أحببت القصة والتمثيل",
  "createdAt": "2024-01-15T10:30:00.000Z"
}

==========================================
22. GET COMMENTS FOR WORK
==========================================
URL: GET https://arabfilmsserver.onrender.com/api/comments/work/{{workId}}
Headers: None

Expected Response: 200 OK
Response will contain: 
[
  {
    "_id": "64f8a1b2c3d4e5f6a7b8c9d1",
    "userId": "64f8a1b2c3d4e5f6a7b8c9d2",
    "workId": "{{workId}}",
    "commentText": "فيلم رائع جداً! أحببت القصة والتمثيل",
    "createdAt": "2024-01-15T10:30:00.000Z"
  }
]

==========================================
23. GET ALL COMMENTS (ADMIN)
==========================================
URL: GET https://arabfilmsserver.onrender.com/api/comments/admin
Headers: 
- Authorization: Bearer {{adminToken}}

Expected Response: 200 OK
Response will contain: 
[
  {
    "_id": "64f8a1b2c3d4e5f6a7b8c9d1",
    "userId": "64f8a1b2c3d4e5f6a7b8c9d2",
    "workId": "{{workId}}",
    "commentText": "فيلم رائع جداً! أحببت القصة والتمثيل",
    "createdAt": "2024-01-15T10:30:00.000Z"
  }
]

==========================================
24. GET COMMENTS FOR PUBLISHER WORKS
==========================================
URL: GET https://arabfilmsserver.onrender.com/api/comments/publisher
Headers: 
- Authorization: Bearer {{publisherToken}}

Expected Response: 200 OK
Response will contain: 
[
  {
    "_id": "64f8a1b2c3d4e5f6a7b8c9d1",
    "userId": "64f8a1b2c3d4e5f6a7b8c9d2",
    "workId": "{{workId}}",
    "commentText": "فيلم رائع جداً! أحببت القصة والتمثيل",
    "createdAt": "2024-01-15T10:30:00.000Z"
  }
]

==========================================
25. DELETE COMMENT (ADMIN)
==========================================
URL: DELETE https://arabfilmsserver.onrender.com/api/comments/{{commentId}}
Headers: 
- Authorization: Bearer {{adminToken}}

Expected Response: 204 No Content

==========================================
26. ADD COMMENT WITH MISSING DATA
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/comments
Headers: 
- Authorization: Bearer {{authToken}}
- Content-Type: application/json

Body (raw JSON):
{
  "workId": "{{workId}}"
}

Expected Response: 400 Bad Request
Response will contain: {"message": "workId and commentText are required"}

==========================================
27. ADD COMMENT TO NON-EXISTENT WORK
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/comments
Headers: 
- Authorization: Bearer {{authToken}}
- Content-Type: application/json

Body (raw JSON):
{
  "workId": "507f1f77bcf86cd799439011",
  "commentText": "تعليق على عمل غير موجود"
}

Expected Response: 404 Not Found
Response will contain: {"message": "Work not found"}

==========================================
RATING ENDPOINTS TEST DATA
==========================================

==========================================
28. RATE WORK
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/ratings
Headers: 
- Authorization: Bearer {{authToken}}
- Content-Type: application/json

Body (raw JSON):
{
  "workId": "{{workId}}",
  "ratingValue": 4
}

Expected Response: 201 Created
Response will contain: 
{
  "_id": "64f8a1b2c3d4e5f6a7b8c9d1",
  "userId": "{{userId}}",
  "workId": "{{workId}}",
  "ratingValue": 4,
  "createdAt": "2024-01-15T10:30:00.000Z",
  "updatedAt": "2024-01-15T10:30:00.000Z"
}

==========================================
29. GET AVERAGE RATING
==========================================
URL: GET https://arabfilmsserver.onrender.com/api/ratings/average/{{workId}}
Headers: None

Expected Response: 200 OK
Response will contain: 
{
  "average": 4.0,
  "count": 1
}

==========================================
30. GET AVERAGE RATING (NO RATINGS)
==========================================
URL: GET https://arabfilmsserver.onrender.com/api/ratings/average/{{workId}}
Headers: None

Expected Response: 200 OK
Response will contain: 
{
  "average": 0,
  "count": 0
}

==========================================
31. GET ALL RATINGS (ADMIN)
==========================================
URL: GET https://arabfilmsserver.onrender.com/api/ratings/admin
Headers: 
- Authorization: Bearer {{adminToken}}

Expected Response: 200 OK
Response will contain: 
[
  {
    "_id": "64f8a1b2c3d4e5f6a7b8c9d1",
    "userId": "{{userId}}",
    "workId": "{{workId}}",
    "ratingValue": 4,
    "createdAt": "2024-01-15T10:30:00.000Z",
    "updatedAt": "2024-01-15T10:30:00.000Z"
  }
]

==========================================
32. GET RATINGS FOR PUBLISHER WORKS
==========================================
URL: GET https://arabfilmsserver.onrender.com/api/ratings/publisher
Headers: 
- Authorization: Bearer {{publisherToken}}

Expected Response: 200 OK
Response will contain: 
[
  {
    "_id": "64f8a1b2c3d4e5f6a7b8c9d1",
    "userId": "{{userId}}",
    "workId": "{{workId}}",
    "ratingValue": 4,
    "createdAt": "2024-01-15T10:30:00.000Z",
    "updatedAt": "2024-01-15T10:30:00.000Z"
  }
]

==========================================
33. RATE WORK WITH INVALID VALUE
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/ratings
Headers: 
- Authorization: Bearer {{authToken}}
- Content-Type: application/json

Body (raw JSON):
{
  "workId": "{{workId}}",
  "ratingValue": 6
}

Expected Response: 400 Bad Request
Response will contain: {"message": "ratingValue must be between 1 and 5"}

==========================================
34. RATE WORK WITH MISSING DATA
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/ratings
Headers: 
- Authorization: Bearer {{authToken}}
- Content-Type: application/json

Body (raw JSON):
{
  "workId": "{{workId}}"
}

Expected Response: 400 Bad Request
Response will contain: {"message": "workId and ratingValue are required"}

==========================================
35. RATE NON-EXISTENT WORK
==========================================
URL: POST https://arabfilmsserver.onrender.com/api/ratings
Headers: 
- Authorization: Bearer {{authToken}}
- Content-Type: application/json

Body (raw JSON):
{
  "workId": "507f1f77bcf86cd799439011",
  "ratingValue": 4
}

Expected Response: 404 Not Found
Response will contain: {"message": "Work not found"}

==========================================
COMMENT & RATING TESTING SEQUENCE
==========================================
1. First, create a work using "CREATE FILM" or "CREATE SERIES"
2. Save the returned _id as {{workId}} environment variable
3. Add a comment using "ADD COMMENT"
4. Save the returned comment _id as {{commentId}} environment variable
5. Get comments for the work using "GET COMMENTS FOR WORK"
6. Rate the work using "RATE WORK"
7. Get average rating using "GET AVERAGE RATING"
8. Test admin endpoints with admin token
9. Test publisher endpoints with publisher token
10. Test error cases with invalid data

==========================================
COMMENT & RATING ENVIRONMENT VARIABLES
==========================================
In Postman, set these environment variables:
- authToken: (from user signin response)
- adminToken: (from admin signin response)
- publisherToken: (from publisher signin response)
- workId: (from create work response)
- commentId: (from add comment response)
- userId: (from user signin response)

==========================================
COMMENT & RATING NOTES
==========================================
- Comments have a maximum length of 2000 characters
- Ratings must be between 1 and 5 (inclusive)
- Each user can only have one rating per work (upsert behavior)
- Comments are sorted by createdAt (newest first)
- Admin can view and delete all comments
- Publishers can only view comments on their own works
- Average rating is calculated to 2 decimal places
- Comments and ratings are automatically linked to the authenticated user
